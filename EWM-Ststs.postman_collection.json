{
	"info": {
		"_postman_id": "fdd58a65-ae02-4f9f-af8a-5de75e1062ac",
		"name": "EWM-Ststs",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26871176"
	},
	"item": [
		{
			"name": "добавление EndpointHit1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 201\", function() {\r",
							"    pm.response.to.have.status(201); // код ответа должен быть равен 201 created\r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержат данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"\r",
							"}); \r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр id = 1 \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('id');  //данные должны содержать параметр id\r",
							"    pm.expect(jsonData.id, '\"id\" must be 1').to.eql(1);  //проверка определённого значения id\r",
							"});\r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр app = ewm-main-service \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('app');\r",
							"    pm.expect(jsonData.app, '\"app\" must be \"ewm-main-service\"').to.eql(\"ewm-main-service\");\r",
							"});\r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр uri = /events/1 \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('uri');\r",
							"    pm.expect(jsonData.uri, '\"uri\" must be \"/events/1\"').to.eql(\"/events/1\");\r",
							"});\r",
							"pm.test(\"Данные ответа должны содержать параметр ip = 192.163.0.1 \", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.have.property('ip');\r",
							"    pm.expect(jsonData.ip, '\"ip\" must be \"192.163.0.1\"').to.eql(\"192.163.0.1\");\r",
							"});\r",
							"pm.test(\"Данные ответа должны содержать параметр timestamp =2022-09-06 11:00:23 \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('timestamp');\r",
							"    pm.expect(jsonData.timestamp, '\"timestamp\" must be \"2022-09-06 11:00:23\"').to.eql(\"2022-09-06 11:00:23\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"app\": \"ewm-main-service\",\r\n  \"uri\": \"/events/1\",\r\n  \"ip\": \"192.163.0.1\",\r\n  \"timestamp\": \"2022-09-06 11:00:23\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9090/hit",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"hit"
					]
				}
			},
			"response": []
		},
		{
			"name": "добавление EndpointHit2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 201\", function() {\r",
							"    pm.response.to.have.status(201); // код ответа должен быть равен 201 created\r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержат данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"\r",
							"}); \r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр id = 2 \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('id');  //данные должны содержать параметр id\r",
							"    pm.expect(jsonData.id, '\"id\" must be 2').to.eql(2);  //проверка определённого значения id\r",
							"});\r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр app = ewm-main-service \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('app');\r",
							"    pm.expect(jsonData.app, '\"app\" must be \"ewm-main-service\"').to.eql(\"ewm-main-service\");\r",
							"});\r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр uri = /events \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('uri');\r",
							"    pm.expect(jsonData.uri, '\"uri\" must be \"/events\"').to.eql(\"/events\");\r",
							"});\r",
							"pm.test(\"Данные ответа должны содержать параметр ip = 192.163.0.1 \", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.have.property('ip');\r",
							"    pm.expect(jsonData.ip, '\"ip\" must be \"192.163.0.1\"').to.eql(\"192.163.0.1\");\r",
							"});\r",
							"pm.test(\"Данные ответа должны содержать параметр timestamp =2023-02-06 11:00:23 \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('timestamp');\r",
							"    pm.expect(jsonData.timestamp, '\"timestamp\" must be \"2023-02-06 11:00:23\"').to.eql(\"2023-02-06 11:00:23\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"app\": \"ewm-main-service\",\r\n    \"uri\": \"/events\",\r\n    \"ip\": \"192.163.0.1\",\r\n    \"timestamp\": \"2023-02-06 11:00:23\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9090/hit",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"hit"
					]
				}
			},
			"response": []
		},
		{
			"name": "добавление EndpointHit3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 201\", function() {\r",
							"    pm.response.to.have.status(201); // код ответа должен быть равен 201 created\r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержат данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"\r",
							"}); \r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр id = 3 \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('id');  //данные должны содержать параметр id\r",
							"    pm.expect(jsonData.id, '\"id\" must be 3').to.eql(3);  //проверка определённого значения id\r",
							"});\r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр app = ewm-main-service \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('app');\r",
							"    pm.expect(jsonData.app, '\"app\" must be \"ewm-main-service\"').to.eql(\"ewm-main-service\");\r",
							"});\r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр uri = /events/1 \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('uri');\r",
							"    pm.expect(jsonData.uri, '\"uri\" must be \"/events/1\"').to.eql(\"/events/1\");\r",
							"});\r",
							"pm.test(\"Данные ответа должны содержать параметр ip = 192.163.0.1 \", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.have.property('ip');\r",
							"    pm.expect(jsonData.ip, '\"ip\" must be \"192.163.0.1\"').to.eql(\"192.163.0.1\");\r",
							"});\r",
							"pm.test(\"Данные ответа должны содержать параметр timestamp =2023-03-06 11:00:23 \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('timestamp');\r",
							"    pm.expect(jsonData.timestamp, '\"timestamp\" must be \"2023-03-06 11:00:23\"').to.eql(\"2023-03-06 11:00:23\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"app\": \"ewm-main-service\",\r\n    \"uri\": \"/events/1\",\r\n    \"ip\": \"192.163.0.1\",\r\n    \"timestamp\": \"2023-03-06 11:00:23\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9090/hit",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"hit"
					]
				}
			},
			"response": []
		},
		{
			"name": "добавление EndpointHit4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 201\", function() {\r",
							"    pm.response.to.have.status(201); // код ответа должен быть равен 201 created\r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержат данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"\r",
							"}); \r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр id = 4 \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('id');  //данные должны содержать параметр id\r",
							"    pm.expect(jsonData.id, '\"id\" must be 4').to.eql(4);  //проверка определённого значения id\r",
							"});\r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр app = ewm-main-service \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('app');\r",
							"    pm.expect(jsonData.app, '\"app\" must be \"ewm-main-service\"').to.eql(\"ewm-main-service\");\r",
							"});\r",
							"\r",
							"pm.test(\"Данные ответа должны содержать параметр uri = /events/1 \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('uri');\r",
							"    pm.expect(jsonData.uri, '\"uri\" must be \"/events/1\"').to.eql(\"/events/1\");\r",
							"});\r",
							"pm.test(\"Данные ответа должны содержать параметр ip = 192.163.0.2 \", function () {\r",
							"   \r",
							"    pm.expect(jsonData).to.have.property('ip');\r",
							"    pm.expect(jsonData.ip, '\"ip\" must be \"192.163.0.2\"').to.eql(\"192.163.0.2\");\r",
							"});\r",
							"pm.test(\"Данные ответа должны содержать параметр timestamp =2023-05-06 11:00:23 \", function () {\r",
							"    \r",
							"    pm.expect(jsonData).to.have.property('timestamp');\r",
							"    pm.expect(jsonData.timestamp, '\"timestamp\" must be \"2023-05-06 11:00:23\"').to.eql(\"2023-05-06 11:00:23\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"app\": \"ewm-main-service\",\r\n    \"uri\": \"/events/1\",\r\n    \"ip\": \"192.163.0.2\",\r\n    \"timestamp\": \"2023-05-06 11:00:23\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:9090/hit",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"hit"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение статистики без указания uris",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200\", function() {\r",
							"    pm.response.to.be.ok; // код ответа должен быть равен 200 OK\r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержат данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"\r",
							"}); \r",
							"\r",
							"pm.test(\"Тело ответа должно быть массивом определённой длины\", function() {\r",
							"    pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"    pm.expect(body.length, 'List length must be 2').to.eql(2);  // проверяем определённую длину массива\r",
							"}); \r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать app = ewm-main-service\", function () {\r",
							"    pm.expect(body[0]).to.have.property('app');\r",
							"    pm.expect(body[0].app, '\"app\" must be ewm-main-service').to.eql('ewm-main-service');\r",
							"});\r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать uri = /events\", function () {\r",
							"    pm.expect(body[0]).to.have.property('uri');\r",
							"    pm.expect(body[0].uri, '\"uri\" must be /events').to.eql('/events');\r",
							"});\r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать hits = 1\", function () {\r",
							"    pm.expect(body[0]).to.have.property('hits');\r",
							"    pm.expect(body[0].hits, '\"hits\" must be 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать app = ewm-main-service\", function () {\r",
							"    pm.expect(body[1]).to.have.property('app');\r",
							"    pm.expect(body[1].app, '\"app\" must be ewm-main-service').to.eql('ewm-main-service');\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать uri = /events/1\", function () {\r",
							"    pm.expect(body[1]).to.have.property('uri');\r",
							"    pm.expect(body[1].uri, '\"uri\" must be /events/1').to.eql('/events/1');\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать hits = 3\", function () {\r",
							"    pm.expect(body[1]).to.have.property('hits');\r",
							"    pm.expect(body[1].hits, '\"hits\" must be 3').to.eql(3);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9090/stats?start=2022-05-06 11:00:23&end=2023-07-06 11:00:23&unique=false",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"stats"
					],
					"query": [
						{
							"key": "start",
							"value": "2022-05-06 11:00:23"
						},
						{
							"key": "end",
							"value": "2023-07-06 11:00:23"
						},
						{
							"key": "unique",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение статистики для events/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200\", function() {\r",
							"    pm.response.to.be.ok; // код ответа должен быть равен 200 OK\r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержат данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"\r",
							"}); \r",
							"\r",
							"pm.test(\"Тело ответа должно быть массивом определённой длины\", function() {\r",
							"    pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"    pm.expect(body.length, 'List length must be 1').to.eql(1);  // проверяем определённую длину массива\r",
							"}); \r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать app = ewm-main-service\", function () {\r",
							"    pm.expect(body[0]).to.have.property('app');\r",
							"    pm.expect(body[0].app, '\"app\" must be ewm-main-service').to.eql('ewm-main-service');\r",
							"});\r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать uri = /events/1\", function () {\r",
							"    pm.expect(body[0]).to.have.property('uri');\r",
							"    pm.expect(body[0].uri, '\"uri\" must be /events/1').to.eql('/events/1');\r",
							"});\r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать hits = 3\", function () {\r",
							"    pm.expect(body[0]).to.have.property('hits');\r",
							"    pm.expect(body[0].hits, '\"hits\" must be 3').to.eql(3);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9090/stats?start=2022-05-06 11:00:23&end=2023-07-06 11:00:23&uris=/events/1&unique=false",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"stats"
					],
					"query": [
						{
							"key": "start",
							"value": "2022-05-06 11:00:23"
						},
						{
							"key": "end",
							"value": "2023-07-06 11:00:23"
						},
						{
							"key": "uris",
							"value": "/events/1"
						},
						{
							"key": "unique",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение статистики для списка uris",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200\", function() {\r",
							"    pm.response.to.be.ok; // код ответа должен быть равен 200 OK\r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержат данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"\r",
							"}); \r",
							"\r",
							"pm.test(\"Тело ответа должно быть массивом определённой длины\", function() {\r",
							"    pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"    pm.expect(body.length, 'List length must be 2').to.eql(2);  // проверяем определённую длину массива\r",
							"}); \r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать app = ewm-main-service\", function () {\r",
							"    pm.expect(body[0]).to.have.property('app');\r",
							"    pm.expect(body[0].app, '\"app\" must be ewm-main-service').to.eql('ewm-main-service');\r",
							"});\r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать uri = /events\", function () {\r",
							"    pm.expect(body[0]).to.have.property('uri');\r",
							"    pm.expect(body[0].uri, '\"uri\" must be /events').to.eql('/events');\r",
							"});\r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать hits = 1\", function () {\r",
							"    pm.expect(body[0]).to.have.property('hits');\r",
							"    pm.expect(body[0].hits, '\"hits\" must be 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать app = ewm-main-service\", function () {\r",
							"    pm.expect(body[1]).to.have.property('app');\r",
							"    pm.expect(body[1].app, '\"app\" must be ewm-main-service').to.eql('ewm-main-service');\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать uri = /events/1\", function () {\r",
							"    pm.expect(body[1]).to.have.property('uri');\r",
							"    pm.expect(body[1].uri, '\"uri\" must be /events/1').to.eql('/events/1');\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать hits = 3\", function () {\r",
							"    pm.expect(body[1]).to.have.property('hits');\r",
							"    pm.expect(body[1].hits, '\"hits\" must be 3').to.eql(3);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9090/stats?start=2022-05-06 11:00:23&end=2023-07-06 11:00:23&uris=/events, /events/1&unique=false",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"stats"
					],
					"query": [
						{
							"key": "start",
							"value": "2022-05-06 11:00:23"
						},
						{
							"key": "end",
							"value": "2023-07-06 11:00:23"
						},
						{
							"key": "uris",
							"value": "/events, /events/1"
						},
						{
							"key": "unique",
							"value": "false"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение статистики с уникальным ip",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200\", function() {\r",
							"    pm.response.to.be.ok; // код ответа должен быть равен 200 OK\r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержат данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"\r",
							"}); \r",
							"\r",
							"pm.test(\"Тело ответа должно быть массивом определённой длины\", function() {\r",
							"    pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"    pm.expect(body.length, 'List length must be 2').to.eql(2);  // проверяем определённую длину массива\r",
							"}); \r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать app = ewm-main-service\", function () {\r",
							"    pm.expect(body[0]).to.have.property('app');\r",
							"    pm.expect(body[0].app, '\"app\" must be ewm-main-service').to.eql('ewm-main-service');\r",
							"});\r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать uri = /events\", function () {\r",
							"    pm.expect(body[0]).to.have.property('uri');\r",
							"    pm.expect(body[0].uri, '\"uri\" must be /events').to.eql('/events');\r",
							"});\r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать hits = 1\", function () {\r",
							"    pm.expect(body[0]).to.have.property('hits');\r",
							"    pm.expect(body[0].hits, '\"hits\" must be 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать app = ewm-main-service\", function () {\r",
							"    pm.expect(body[1]).to.have.property('app');\r",
							"    pm.expect(body[1].app, '\"app\" must be ewm-main-service').to.eql('ewm-main-service');\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать uri = /events/1\", function () {\r",
							"    pm.expect(body[1]).to.have.property('uri');\r",
							"    pm.expect(body[1].uri, '\"uri\" must be /events/1').to.eql('/events/1');\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать hits = 2\", function () {\r",
							"    pm.expect(body[1]).to.have.property('hits');\r",
							"    pm.expect(body[1].hits, '\"hits\" must be 2').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9090/stats?start=2022-05-06 11:00:23&end=2023-07-06 11:00:23&uris=/events, /events/1&unique=true",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"stats"
					],
					"query": [
						{
							"key": "start",
							"value": "2022-05-06 11:00:23"
						},
						{
							"key": "end",
							"value": "2023-07-06 11:00:23"
						},
						{
							"key": "uris",
							"value": "/events, /events/1"
						},
						{
							"key": "unique",
							"value": "true"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение статистики в заданном диапазоне времени",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"\r",
							"pm.test(\"Ответ должен содержать код статуса 200\", function() {\r",
							"    pm.response.to.be.ok; // код ответа должен быть равен 200 OK\r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен содержат данные в формате json\", function() {\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"\r",
							"}); \r",
							"\r",
							"pm.test(\"Тело ответа должно быть массивом определённой длины\", function() {\r",
							"    pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"    pm.expect(body.length, 'List length must be 2').to.eql(2);  // проверяем определённую длину массива\r",
							"}); \r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать app = ewm-main-service\", function () {\r",
							"    pm.expect(body[0]).to.have.property('app');\r",
							"    pm.expect(body[0].app, '\"app\" must be ewm-main-service').to.eql('ewm-main-service');\r",
							"});\r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать uri = /events\", function () {\r",
							"    pm.expect(body[0]).to.have.property('uri');\r",
							"    pm.expect(body[0].uri, '\"uri\" must be /events').to.eql('/events');\r",
							"});\r",
							"\r",
							"pm.test(\"Первый элемент массива должен содержать hits = 1\", function () {\r",
							"    pm.expect(body[0]).to.have.property('hits');\r",
							"    pm.expect(body[0].hits, '\"hits\" must be 1').to.eql(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать app = ewm-main-service\", function () {\r",
							"    pm.expect(body[1]).to.have.property('app');\r",
							"    pm.expect(body[1].app, '\"app\" must be ewm-main-service').to.eql('ewm-main-service');\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать uri = /events/1\", function () {\r",
							"    pm.expect(body[1]).to.have.property('uri');\r",
							"    pm.expect(body[1].uri, '\"uri\" must be /events/1').to.eql('/events/1');\r",
							"});\r",
							"\r",
							"pm.test(\"Второй элемент массива должен содержать hits = 1\", function () {\r",
							"    pm.expect(body[1]).to.have.property('hits');\r",
							"    pm.expect(body[1].hits, '\"hits\" must be 1').to.eql(1);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:9090/stats?start=2023-01-06 11:00:23&end=2023-04-06 11:00:23&uris=/events, /events/1&unique=false",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "9090",
					"path": [
						"stats"
					],
					"query": [
						{
							"key": "start",
							"value": "2023-01-06 11:00:23"
						},
						{
							"key": "end",
							"value": "2023-04-06 11:00:23"
						},
						{
							"key": "uris",
							"value": "/events, /events/1"
						},
						{
							"key": "unique",
							"value": "false"
						}
					]
				}
			},
			"response": []
		}
	]
}